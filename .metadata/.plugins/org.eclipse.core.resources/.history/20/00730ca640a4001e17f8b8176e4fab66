/**********************************************************************************************************************
 * \file Duty_Cycle_Calculations.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
volatile unsigned int Capture_Value_1 = 0;
volatile unsigned int Capture_Value_2 = 0;
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Duty_Cycle_Calculator_Function(void)
{
    unsigned int   result = 0;
    unsigned long  quotient = 0;
    unsigned long  remainder = 0;
    unsigned char  Return_Result = 0;
    unsigned char  Multiplicand = 100;
    unsigned int   Capture_Value_sum = 0;
 //   unsigned int   i ;
//    unsigned int   bit;

    unsigned char  sumBit;
    unsigned char  carry = 0;


//    add two 16-bit unsigned integers
    for (int i = 0; i < 16; ++i)
    {
        uint8_t bitA = (Capture_Value_1 >> i) & 0x01;
        uint8_t bitB = (Capture_Value_2 >> i) & 0x01;
        // Calculate the sum bit
        sumBit = bitA ^ bitB ^ carry;
        // Update the carry for the next iteration
        carry = (bitA & bitB) | ((bitA ^ bitB) & carry);
        // Update the Capture_Value_sum
        Capture_Value_sum |= (sumBit << i);
    }

//  Multiplikation von 16-Bit-Integer und 8-Bit-Integer
    for (int i = 0; i < 8; i++) {
    // Überprüfe, ob das aktuelle Bit in b gesetzt is
        if (Multiplicand & (1 << i)) {
    // Addiere den Wert von a, der um die aktuelle Bit-Position nach links verschoben ist, zum Ergebnis
            result += Capture_Value_1 << i;
                }
            }
// perform 32-bit division: dividend / divisor
        //Loop for each bit in the dividend
    for (int bit = 31; bit >= 0; bit--) {
        remainder <<= 1;  // Left shift the remainder by 1 to make room for the next bit
        remainder |= (Capture_Value_sum >> bit) & 0x01;  // Set the LSB of remainder with the current bit of dividend

        if (remainder >= result) {
            remainder -= result;
            quotient |= (1UL << bit);  // Set the corresponding bit in the quotient
            }
    }



}
