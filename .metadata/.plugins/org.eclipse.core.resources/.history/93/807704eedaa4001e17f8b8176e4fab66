/**********************************************************************************************************************
 * \file Duty_Cycle_Calculations.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "registers.h"
#include "scr_header_files.h"
#include "SCR_Macros.h"
#include "SCR_TypesReg.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
volatile unsigned int Capture_Value_1 = 0;
volatile unsigned int Capture_Value_2 = 0;
uint32_t  multiplication_16bit_by_8bit_Result;
uint16_t Capture_Value_sum;
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/
__xdata __at(0x1F00) unsigned int  data ;
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void add_two_16_bit_unint(void);
void multiply_16bit_by_8bit(void);

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Duty_Cycle_Calculator_Function(void)
{
    Capture_Value_1 = 0xFFFF;
    Capture_Value_2 = 0xFFFF;
    add_two_16_bit_unint();
    data =   0xFF00;
  //  multiply_16bit_by_8bit();
  //  data =   multiplication_16bit_by_8bit_Result;
}
/***********************************************************************************************************/
  void add_two_16_bit_unint(void)
  {
      uint16_t a = Capture_Value_1;
      uint16_t b = Capture_Value_2;
      uint8_t carry = 0;
      uint16_t result = 0;
      for (int i = 0; i < 16; ++i) {
              uint8_t bitA = (a >> i) & 0x01;
              uint8_t bitB = (b >> i) & 0x01;
              // Calculate the sum bit
              uint8_t sumBit = bitA ^ bitB ^ carry;
              // Update the carry for the next iteration
              carry = (bitA & bitB) | ((bitA ^ bitB) & carry);
              // Update the result
              result |= (sumBit << i);
          }
      Capture_Value_sum = result;
  }



/**********************************************************************************************************/
void multiply_16bit_by_8bit(void)
{
    uint16_t multiplicand = Capture_Value_1;
    uint8_t multiplier = 100;
    uint32_t result = 0;
    uint8_t carry = 0;
        // Iterate through each bit of the multiplier
        for (int i = 0; i < 8; ++i) {
            // Check if the current bit of the multiplier is 1
            if ((multiplier & 1) == 1) {
                result += multiplicand;  // Add the multiplicand to the result
                // Check for overflow
//                                                if (result > 0xFFFF) {
//                                                    carry = 1;
//                                                }
//                                                else {
//                                                    carry = 0;
//                                                }
            }
            // Shift the result one position to the left
            result <<= 1;
            // Shift the multiplier one position to the right
            multiplier >>= 1;
        }
        // Check for overflow after the last addition
//                                                    if (carry == 1) {
//                                                        printf("Overflow occurred during multiplication.\n");
//                                                    } else {
//                                                        printf("Result without overflow: %u\n", result & 0xFFFF);  // Mask to keep only the 16 least significant bits
//                                                    }
        multiplication_16bit_by_8bit_Result = result & 0xFFFF;// Mask to keep only the 16 least significant bits
}
